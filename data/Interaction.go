package data

import (
	"sync"

	"github.com/gofiber/websocket/v2"
)

type InteractionApplication struct {
	ApplicationID string `json:"application_id"`
	Type          int    `json:"type"`
	ID            string `json:"id"`
	Token         string `json:"token"`
}

type TypeConnection struct {
	PublicKey string `json:"public_key"`
	BotID     string `json:"bot_id"`
	BotName   string `json:"bot_name"`
	Date      int    `json:"date"`
}

type TypeConnectionSaved struct {
	PublicKey string          `json:"public_key"`
	BotID     string          `json:"bot_id"`
	BotName   string          `json:"bot_name"`
	Date      int             `json:"date"`
	Session   *websocket.Conn `json:"session"`
	Wg        sync.WaitGroup
}

type IPacket struct {
	ID               string      `json:"id"`
	Type             int         `json:"type"`
	Metadata         interface{} `json:"data"`
	TokenInteraction string      `json:"token"`   // Token generated by Discord (This is not referring to the Bot token! It's the interaction.)
	Content          interface{} `json:"message"` // Base64
	PingPong         bool        `json:"ping_pong"`
}

type TokenInteractionData struct {
	sync.RWMutex
	TokenInteraction string      `json:"token"`   // Token generated by Discord (This is not referring to the Bot token! It's the interaction.)
	Content          interface{} `json:"message"` // Base64
	PingPong         bool        `json:"ping_pong"`
}

type TokenInteractionDataSync struct {
	sync.RWMutex
	TokenInteraction string `json:"token"` // Token generated by Discord (This is not referring to the Bot token! It's the interaction.)
	Wg               *sync.WaitGroup
}
